{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/forEach.js","src/pjax.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length","1","module","NodeList","prototype","forEach","callback","scope","this","PJAX","container","arguments","undefined","constructor","DEFAULT_CONTAINER","links","DEFAULT_LINKS","replace","DEFAULT_REPLACE","_classCallCheck","queue","_this","history","pushState","addLinkEvent","document","querySelectorAll","window","onpopstate","request","location","href","execQueue","pjaxLinks","_this2","pjaxLink","addEventListener","preventDefault","target","url","_this3","xhr","XMLHttpRequest","open","responseType","response","currentTarget","_loop","len","textContent","element","key","found","_loop2","attribute","selector","setAttribute","getAttribute","newPage","querySelector","currentPage","parentNode","replaceChild","script","createElement","text","head","appendChild","removeChild","afterLoad","send","Array","func","console","log","push","onload"],"mappings":"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","file":"pjax.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","if(typeof NodeList.prototype.forEach === 'undefined'){\n    /* Polyfill for nodelist foreach for ie11 */\n    NodeList.prototype.forEach = function(callback, scope){\n        for(let i = 0; i < this.length; i++){\n            callback.call(scope, this[i], i);\n        }\n    };\n}\n","import './forEach';\n\n/**\n * This is an ES6 Class that handles PJAX logic for an application\n *\n * It utilizes pushstate and history in order to help make a site load only a\n * portion of the page, thereby lowering the amount of requests on the page and\n * as a result speeds up user experience for a live demo, view\n * https://zeraphie.github.io/\n *\n * @license MIT\n * @version 1.1.0\n * @author Izzy Skye\n */\nexport default class PJAX {\n    /**\n     * Construct the PJAX class and add the default container if none is passed\n     * through as well as an empty function queue\n     *\n     * @param container\n     * @param links\n     * @param replace\n     */\n    constructor(\n        container = this.constructor.DEFAULT_CONTAINER,\n        links = this.constructor.DEFAULT_LINKS,\n        replace = this.constructor.DEFAULT_REPLACE\n    ){\n        this.container = container;\n        this.links = links;\n        this.replace = replace;\n        this.queue = [];\n    }\n    \n    /**\n     * The default selector for PJAX to replace\n     * \n     * @returns {string} DEFAULT_CONTAINER The default container\n     * @constructor\n     */\n    static get DEFAULT_CONTAINER(){\n        return '.body';\n    }\n    \n    /**\n     * The default selector for PJAX to execute pjax from\n     * \n     * @returns {string} DEFAULT_CONTAINER The default links\n     * @constructor\n     */\n    static get DEFAULT_LINKS(){\n        return '.pjax-link';\n    }\n    \n    /**\n     * The default elements to replace the content/attribute\n     * \n     * @returns {{textContent: string[], attribute: *[]}} DEFAULT_REPLACE The default replace\n     * @constructor\n     */\n    static get DEFAULT_REPLACE(){\n        return {\n            textContent: [\n                'title'\n            ],\n            attribute: [\n                {\n                    selector: 'meta[name$=\"title\"]',\n                    attribute: 'content'\n                },\n                {\n                    selector: 'meta[name$=\"description\"]',\n                    attribute: 'content'\n                },\n                {\n                    selector: 'meta[property^=\"og:\"]',\n                    attribute: 'content'\n                },\n                {\n                    selector: 'meta[property^=\"article:\"]',\n                    attribute: 'content'\n                },\n                {\n                    selector: 'link[rel=\"canonical\"]',\n                    attribute: 'href'\n                }\n            ]\n        }\n    }\n    \n    /**\n     * Add all the event listeners needed for an application to use pjax, these\n     * are typically just links and forms, although forms are to come\n     * \n     * @returns {PJAX}\n     */\n    setup(){\n        if(history && history.pushState){\n            this.addLinkEvent(document.querySelectorAll(this.links));\n            \n            window.onpopstate = () => {\n                this.request(window.location.href);\n            };\n            \n            /* Make sure the onload functions are fired at least once! */\n            this.execQueue();\n        }\n        \n        return this;\n    }\n    \n    /**\n     * Add the pjax link event to all the links passed into this function\n     * \n     * @param pjaxLinks A node list of all the links to pjax\n     * @returns {PJAX}\n     */\n    addLinkEvent(pjaxLinks){\n        pjaxLinks.forEach(pjaxLink => {\n            pjaxLink.addEventListener('click', e => {\n                e.preventDefault();\n                this.request(e.target.href);\n                history.pushState(null, null, e.target.href);\n            });\n        });\n        \n        return this;\n    };\n    \n    /**\n     * Make the actual pjax request, replacing the title and description of the\n     * page as well as the body and making scripts executable\n     * \n     * @param url The url to perform the pjax request to\n     * @returns {PJAX}\n     */\n    request(url){\n        /* Open an ajax get request to the url, requesting the document */\n        let xhr = new XMLHttpRequest();\n        xhr.open('GET', url);\n        xhr.responseType = 'document';\n        \n        /* After loading the document, do the replacing */\n        xhr.addEventListener('load', e => {\n            let response = e.currentTarget.response;\n            \n            /* Replace all the text content fields */\n            for(let i = 0, len = this.replace.textContent.length; i < len; i++){\n                let elements = document.querySelectorAll(\n                    this.replace.textContent[i]\n                );\n                \n                elements.forEach((element, key) => {\n                    let found = response.querySelectorAll(\n                        this.replace.textContent[i]\n                    );\n                    \n                    if(found.length && found[key]){\n                        element.textContent = found[key].textContent;\n                    }\n                });\n            }\n            \n            /* Replace all the attributes */\n            for(let i = 0, len = this.replace.attribute.length; i < len; i++){\n                let elements = document.querySelectorAll(\n                    this.replace.attribute[i].selector\n                );\n                \n                elements.forEach((element, key) => {\n                    let found = response.querySelectorAll(\n                        this.replace.attribute[i].selector\n                    );\n                    \n                    if(found.length && found[key]){\n                        element.setAttribute(\n                            this.replace.attribute[i].attribute,\n                            found[key].getAttribute(\n                                this.replace.attribute[i].attribute\n                            )\n                        );\n                    }\n                });\n            }\n            \n            /* Add the pjax link event to any new links in the content */\n            this.addLinkEvent(response.querySelectorAll(\n                `${this.container} ${this.links}`\n            ));\n            \n            /* Replace the actual content of the page */\n            let newPage = response.querySelector(this.container);\n            \n            let currentPage = document.querySelector(this.container);\n            currentPage.parentNode.replaceChild(newPage, currentPage);\n            \n            /* Replace all the script tags and execute them */\n            let scripts = response.querySelectorAll(\n                `${this.container} script`\n            );\n            \n            scripts.forEach(code => {\n                let script = document.createElement('script');\n                script.text = code.textContent;\n                document.head.appendChild(script).parentNode.removeChild(script);\n            });\n            \n            /* Execute the queue */\n            if(typeof this.afterLoad === 'function'){\n                this.afterLoad();\n            }\n        });\n        \n        /* Actually send the ajax request */\n        xhr.send();\n        \n        return this;\n    }\n    \n    /**\n     * Execute the function queue\n     * \n     * @returns {PJAX}\n     */\n    execQueue(){\n        /* Guard against improper queues */\n        if(!(this.queue instanceof Array) || !this.queue.length){\n            return this;\n        }\n        \n        this.queue.forEach(func => {\n            if(typeof func === 'function'){\n                try {\n                    func();\n                } catch(e) {\n                    console.log('Failed to execute: ', e, func);\n                }\n            }\n        });\n        \n        return this;\n    }\n    \n    /**\n     * This function is to be used in place of window.onload as it will fire any\n     * javascript when the page is loaded initially and on any subsequent pjax\n     * requests\n     * \n     * @param callback The callback function\n     * @returns {PJAX}\n     */\n    onload(callback){\n        if(typeof callback === 'function'){\n            this.queue.push(callback);\n        }\n        \n        window.onload = this.execQueue;\n        this.afterLoad = this.execQueue;\n        \n        return this;\n    }\n}\n"]}